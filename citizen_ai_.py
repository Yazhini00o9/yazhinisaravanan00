# -*- coding: utf-8 -*-
"""Citizen AI.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1exqn3LuS7aTTGZiMv24KavLWDMt-qPiV
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def city_analysis(city_name):
    prompt = f"Provide a detailed analysis of {city_name} including:\n1. Crime Index and safety statistics\n2. Accident rates and traffic safety information\n3. Overall safety assessment\n\nCity: {city_name}\nAnalysis:"
    return generate_response(prompt, max_length=1000)

def citizen_interaction(query):
    prompt = f"As a government assistant, provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:\n\nQuery: {query}\nResponse:"
    return generate_response(prompt, max_length=1000)

# Create Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# City Analysis & Citizen Services AI")

    with gr.Tabs():
        with gr.TabItem("City Analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(label="Enter City Name")
                    analyze_button = gr.Button("Analyze City")
                with gr.Column():
                    city_output = gr.Textbox(label="Analysis Output", interactive=False)
            analyze_button.click(city_analysis, inputs=city_input, outputs=city_output)

        with gr.TabItem("Citizen Interaction"):
            with gr.Row():
                with gr.Column():
                    query_input = gr.Textbox(label="Enter your query")
                    submit_button = gr.Button("Submit Query")
                with gr.Column():
                    query_output = gr.Textbox(label="Response", interactive=False)
            submit_button.click(citizen_interaction, inputs=query_input, outputs=query_output)

app.launch(share=True)